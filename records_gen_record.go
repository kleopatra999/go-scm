package scm

// Generated by gen-record. DO NOT EDIT.

import (
	"reflect"

	"github.com/peter-edge/go-record"
)

var (
	AllRecordConverters = []record.RecordConverter{
		&CloneRecordRecordConverter{},
		&TarballRecordRecordConverter{},
	}
)

func (this *CloneRecord) ReadableName() string {
	return "Clone"
}

type CloneRecordRecordConverter struct{}

func (this *CloneRecordRecordConverter) Type() reflect.Type {
	return reflect.TypeOf(&CloneRecord{})
}

func (this *CloneRecordRecordConverter) ToMap(object record.RecordObject) (map[string]string, error) {
	value, ok := object.(*CloneRecord)
	if !ok {
		return nil, record.ErrCannotCast
	}
	return map[string]string{
		"PATH": value.Path,
	}, nil
}

func (this *CloneRecordRecordConverter) FromMap(m map[string]string) (record.RecordObject, error) {
	path, ok := m["PATH"]
	if !ok {
		return nil, record.ErrNoValueForKey
	}
	return &CloneRecord{
		Path: path,
	}, nil
}

func (this *TarballRecord) ReadableName() string {
	return "Tarball"
}

type TarballRecordRecordConverter struct{}

func (this *TarballRecordRecordConverter) Type() reflect.Type {
	return reflect.TypeOf(&TarballRecord{})
}

func (this *TarballRecordRecordConverter) ToMap(object record.RecordObject) (map[string]string, error) {
	value, ok := object.(*TarballRecord)
	if !ok {
		return nil, record.ErrCannotCast
	}
	return map[string]string{
		"PATH": value.Path,
	}, nil
}

func (this *TarballRecordRecordConverter) FromMap(m map[string]string) (record.RecordObject, error) {
	path, ok := m["PATH"]
	if !ok {
		return nil, record.ErrNoValueForKey
	}
	return &TarballRecord{
		Path: path,
	}, nil
}

